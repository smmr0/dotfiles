#!/usr/bin/env sh

set -euf
if set -o | grep -q '^pipefail\s'; then
	set -o pipefail
fi

# Exit unless HEAD is a branch (not commit or tag)
if ! git symbolic-ref HEAD > /dev/null 2>&1; then
	exit 0
fi

branches_without_current() {
	grep -v '^*' | sed 's/^[[:space:]]*//'
}

delete_if_obsolete() {
	branch="$1"

	# Return unless branch is behind or equal to its upstream branch
	if [ "$(git rev-list --left-only --count "$branch"..."$branch"@{u} 2> /dev/null)" != '0' ]; then return; fi

	git branch -d "$branch"
}

# Delete branches merged to current remote's default branch
if git config "branch.$(git branch --show-current).remote"; then
  remote="$(git config "branch.$(git branch --show-current).remote")"
else
  remote='origin'
fi
remote_default_branch="$(git remote show "$remote" | grep '^\s*HEAD branch' | sed 's/^[ \t]*HEAD branch:[ \t]*//')"
git branch --merged "$remote/$remote_default_branch" 2> /dev/null | branches_without_current | while read branch; do git branch -d "$branch"; done

# Delete branches that are behind or equal to their upstream branches
git branch | branches_without_current | while read branch; do delete_if_obsolete "$branch"; done
