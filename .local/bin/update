#!/bin/sh

set -euf

try_pull_git_repo() {
	repo_dir="$1"

	echo "$repo_dir"

	if git -C "$repo_dir" rev-parse > /dev/null 2>&1; then
		git -C "$repo_dir" pull 2> /dev/null || true
	fi

	echo
}

pull_rbenv_ish() {
	command="$1"

	if command -v "$command" > /dev/null 2>&1; then
		try_pull_git_repo "$("$command" root)"

		if [ -d "$("$command" root)/plugins" ]; then
			for plugin in $(ls "$("$command" root)/plugins"); do
				try_pull_git_repo "$("$command" root)/plugins/$plugin"
			done
		fi
	fi
}

try_upgrade_pip_package() {
	package="$1"

	if command -v pip > /dev/null 2>&1; then
		if pip list 2> /dev/null | tail -n +3 | awk -v "package=$package" 'BEGIN { rc = 1 } $1 == $package { rc = 0; exit } END { exit rc }'; then
			pip install --upgrade "$package" "$@"
		fi
	fi
}

if [ "$(whoami)" = 'root' ] || ! command -v sudo > /dev/null 2>&1; then
	if command -v apt > /dev/null 2>&1; then
		apt update && apt dist-upgrade -y && apt autoremove -y
		echo
	fi

	if command -v snap > /dev/null 2>&1; then
		snap refresh
		echo
	fi
fi

if [ "$(whoami)" != 'root' ]; then
	if command -v sudo > /dev/null 2>&1; then
		sudo "$(realpath "$0")" "$@" # Re-run script with sudo
	fi

	for possible_repo in $(ls "$HOME/.local/src"); do
		try_pull_git_repo "$HOME/.local/src/$possible_repo"
	done

	"$HOME/.local/src/dotfiles/setup.sh"
	echo

	pull_rbenv_ish rbenv
	if command -v rbenv > /dev/null 2>&1; then
		for ruby_version in $(rbenv versions --bare); do
			if RBENV_VERSION="$ruby_version" ruby -e "exit Gem::Version.new(RUBY_VERSION) >= Gem::Version.new('2.3') ? 0 : 1"; then
				echo "Updating RubyGems for Ruby $ruby_version…"
				RBENV_VERSION="$ruby_version" gem update --system
				echo

				echo "Updating Pry for Ruby $ruby_version…"
				RBENV_VERSION="$ruby_version" gem update pry pry-rails pry-doc
				echo
			fi
		done
	fi

	pull_rbenv_ish nodenv
	pull_rbenv_ish pyenv
	pull_rbenv_ish erlenv
	pull_rbenv_ish exenv
	pull_rbenv_ish jenv

	try_upgrade_pip_package awscli --user
	try_upgrade_pip_package awsebcli --user
fi
